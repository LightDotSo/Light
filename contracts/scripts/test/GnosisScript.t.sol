/// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.16;

import "forge-std/Test.sol";
import "@lightdotso/scripts/GnosisScript.s.sol";

contract GnosisTest is Test {
  GnosisScript script;

  function setUp() public {
    script = new GnosisScript();
  }

  function testInitializer() public {
    address[] memory owners = new address[](1);
    owners[0] = address(0);
    bytes memory sig = abi.encodeWithSignature(
      "createProxyWithNonce(address,bytes,uint256)",
      address(0x3E5c63644E683549055b9Be8653de26E0B4CD36E),
      abi.encodeWithSignature(
        "setup(address[],uint256,address,bytes,address,address,uint256,address)",
        owners,
        1,
        address(0),
        "",
        address(0),
        address(0),
        0,
        0
      ),
      0
    );
    bytes
      memory expected = hex"1688f0b90000000000000000000000003e5c63644e683549055b9be8653de26e0b4cd36e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    assertEq(sig, expected);
  }

  function testInitializerSignature() public {
    address[] memory owners = new address[](1);
    owners[0] = address(0);
    bytes memory sig = abi.encodeWithSignature(
      "setup(address[],uint256,address,bytes,address,address,uint256,address)",
      owners,
      1,
      address(0),
      "",
      address(0),
      address(0),
      0,
      0
    );
    bytes
      memory expected = hex"b63e800d
    assertEq(sig, expected);
  }
}
